[
  {
    "title": "attributes",
    "description": "쉐이더에 등록된 attribute 정보들",
    "example": "인스턴스.attributes",
    "return": "Object"
  },
  {
    "title": "key",
    "description": "고유키",
    "example": "인스턴스.key",
    "return": "String"
  },
  {
    "title": "program",
    "description": "실제 프로그램",
    "example": "인스턴스.uniforms",
    "return": "WebGLProgram"
  },
  {
    "constructorYn": true,
    "title": "RedProgramInfo",
    "description": "\n    - RedProgramInfo 인스턴스 생성자\n    - <b>유일키</b>만 지원하며 키 중복일경우 기존 캐싱된 프로그램 정보를 반환함.\n    - 프로그램 정보는 <b>Object.freeze</b> 상태로 반환됨.\n",
    "params": {
      "redGL": [
        {
          "type": "Red Instance"
        },
        "redGL 인스턴스"
      ],
      "key": [
        {
          "type": "String"
        },
        "- 등록될 키명"
      ],
      "vShaderInfo": [
        {
          "type": "RedShaderInfo"
        }
      ],
      "fShaderInfo": [
        {
          "type": "RedShaderInfo"
        }
      ]
    },
    "example": "\n    var test;\n    test = RedGL(Canvas Element)\n    // basic이라는 이름으로 버텍스 쉐이더를 만든다. \n    test.createShaderInfo(test,'basic', RedProgramInfo.VERTEX_SHADER, 쉐이더소스)\n    test.createShaderInfo(test,'basic', RedProgramInfo.FRAGMENT_SHADER, 쉐이더소스)\n    test.createProgram(\n        test,'basic',\n        test.createShaderInfo(test,'basic', RedProgramInfo.VERTEX_SHADER),\n        test.createShaderInfo(test,'basic', RedProgramInfo.FRAGMENT_SHADER)\n    )\n",
    "return": "RedProgramInfo Instance"
  },
  {
    "title": "shaderInfos",
    "description": "프로그램에 사용된 RedShaderInfo정보",
    "example": "인스턴스.shaderInfos",
    "return": "Object"
  },
  {
    "title": "shaderInfos",
    "description": "\n //TODO: 이놈을 외부에서 주입해야하는구만..\n 아마도 재질마다...필요한 유니폼들이 있을것이고..\n 해당하는 경우만 본인이 따로 재징등에...적용해 줄수있어야한다.\n 결국 프로그램이 유니폼에대한 정의를 내린다.\n",
    "example": "인스턴스.shaderInfos",
    "return": "Object"
  },
  {
    "title": "uniforms",
    "description": "쉐이더에 등록된 uniform 정보들",
    "example": "인스턴스.uniforms",
    "return": "Object"
  }
]